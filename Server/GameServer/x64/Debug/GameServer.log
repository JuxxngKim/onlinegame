Protocol.proto(4,1): warning G7CF62709: Import Enum.proto is unused.
  #pragma once
  #include "Protocol.pb.h"
  #include "Enum.pb.h"
  #include "Struct.pb.h"
  
  using PacketHandlerFunc = std::function<bool(PacketSessionRef&, BYTE*, int32)>;
  extern PacketHandlerFunc GPacketHandler[UINT16_MAX];
  
  enum : uint16
  {
  	PKT_S_EnterGame = 1000,
  	PKT_S_LeaveGame = 1001,
  	PKT_S_Spawn = 1002,
  	PKT_S_Despawn = 1003,
  	PKT_C_Move = 1004,
  	PKT_S_Move = 1005,
  	PKT_C_Skill = 1006,
  	PKT_S_Skill = 1007,
  	PKT_S_ChangeHp = 1008,
  	PKT_S_Die = 1009,
  	PKT_S_Connected = 1010,
  	PKT_C_Login = 1011,
  	PKT_S_Login = 1012,
  	PKT_C_CreatePlayer = 1013,
  	PKT_S_CreatePlayer = 1014,
  	PKT_C_EnterGame = 1015,
  	PKT_S_ItemList = 1016,
  	PKT_S_AddItem = 1017,
  	PKT_C_EquipItem = 1018,
  	PKT_S_EquipItem = 1019,
  	PKT_S_ChangeStat = 1020,
  	PKT_S_Ping = 1021,
  	PKT_C_Pong = 1022,
  };
  
  // Custom Handlers
  bool Handle_INVALID(PacketSessionRef& session, BYTE* buffer, int32 len);
  bool Handle_C_Move(PacketSessionRef& session, Protocol::C_Move& pkt);
  bool Handle_C_Skill(PacketSessionRef& session, Protocol::C_Skill& pkt);
  bool Handle_C_Login(PacketSessionRef& session, Protocol::C_Login& pkt);
  bool Handle_C_CreatePlayer(PacketSessionRef& session, Protocol::C_CreatePlayer& pkt);
  bool Handle_C_EnterGame(PacketSessionRef& session, Protocol::C_EnterGame& pkt);
  bool Handle_C_EquipItem(PacketSessionRef& session, Protocol::C_EquipItem& pkt);
  bool Handle_C_Pong(PacketSessionRef& session, Protocol::C_Pong& pkt);
  
  class ClientPacketHandler
  {
  public:
  	static void Init()
  	{
  		for (int32 i = 0; i < UINT16_MAX; i++)
  			GPacketHandler[i] = Handle_INVALID;
  		GPacketHandler[PKT_C_Move] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_Move>(Handle_C_Move, session, buffer, len); };
  		GPacketHandler[PKT_C_Skill] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_Skill>(Handle_C_Skill, session, buffer, len); };
  		GPacketHandler[PKT_C_Login] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_Login>(Handle_C_Login, session, buffer, len); };
  		GPacketHandler[PKT_C_CreatePlayer] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_CreatePlayer>(Handle_C_CreatePlayer, session, buffer, len); };
  		GPacketHandler[PKT_C_EnterGame] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_EnterGame>(Handle_C_EnterGame, session, buffer, len); };
  		GPacketHandler[PKT_C_EquipItem] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_EquipItem>(Handle_C_EquipItem, session, buffer, len); };
  		GPacketHandler[PKT_C_Pong] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::C_Pong>(Handle_C_Pong, session, buffer, len); };
  	}
  
  	static bool HandlePacket(PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(buffer);
  		return GPacketHandler[header->id](session, buffer, len);
  	}
  	static SendBufferRef MakeSendBuffer(Protocol::S_EnterGame& pkt) { return MakeSendBuffer(pkt, PKT_S_EnterGame); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_LeaveGame& pkt) { return MakeSendBuffer(pkt, PKT_S_LeaveGame); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_Spawn& pkt) { return MakeSendBuffer(pkt, PKT_S_Spawn); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_Despawn& pkt) { return MakeSendBuffer(pkt, PKT_S_Despawn); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_Move& pkt) { return MakeSendBuffer(pkt, PKT_S_Move); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_Skill& pkt) { return MakeSendBuffer(pkt, PKT_S_Skill); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_ChangeHp& pkt) { return MakeSendBuffer(pkt, PKT_S_ChangeHp); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_Die& pkt) { return MakeSendBuffer(pkt, PKT_S_Die); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_Connected& pkt) { return MakeSendBuffer(pkt, PKT_S_Connected); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_Login& pkt) { return MakeSendBuffer(pkt, PKT_S_Login); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_CreatePlayer& pkt) { return MakeSendBuffer(pkt, PKT_S_CreatePlayer); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_ItemList& pkt) { return MakeSendBuffer(pkt, PKT_S_ItemList); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_AddItem& pkt) { return MakeSendBuffer(pkt, PKT_S_AddItem); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_EquipItem& pkt) { return MakeSendBuffer(pkt, PKT_S_EquipItem); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_ChangeStat& pkt) { return MakeSendBuffer(pkt, PKT_S_ChangeStat); }
  	static SendBufferRef MakeSendBuffer(Protocol::S_Ping& pkt) { return MakeSendBuffer(pkt, PKT_S_Ping); }
  
  private:
  	template<typename PacketType, typename ProcessFunc>
  	static bool HandlePacket(ProcessFunc func, PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketType pkt;
  		if (pkt.ParseFromArray(buffer + sizeof(PacketHeader), len - sizeof(PacketHeader)) == false)
  			return false;
  
  		return func(session, pkt);
  	}
  
  	template<typename T>
  	static SendBufferRef MakeSendBuffer(T& pkt, uint16 pktId)
  	{
  		const uint16 dataSize = static_cast<uint16>(pkt.ByteSizeLong());
  		const uint16 packetSize = dataSize + sizeof(PacketHeader);
  
  		SendBufferRef sendBuffer = GSendBufferManager->Open(packetSize);
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(sendBuffer->Buffer());
  		header->size = packetSize;
  		header->id = pktId;
  		ASSERT_CRASH(pkt.SerializeToArray(&header[1], dataSize));
  		sendBuffer->Close(packetSize);
  
  		return sendBuffer;
  	}
  };
  #pragma once
  #include "Protocol.pb.h"
  #include "Enum.pb.h"
  #include "Struct.pb.h"
  
  using PacketHandlerFunc = std::function<bool(PacketSessionRef&, BYTE*, int32)>;
  extern PacketHandlerFunc GPacketHandler[UINT16_MAX];
  
  enum : uint16
  {
  	PKT_S_EnterGame = 1000,
  	PKT_S_LeaveGame = 1001,
  	PKT_S_Spawn = 1002,
  	PKT_S_Despawn = 1003,
  	PKT_C_Move = 1004,
  	PKT_S_Move = 1005,
  	PKT_C_Skill = 1006,
  	PKT_S_Skill = 1007,
  	PKT_S_ChangeHp = 1008,
  	PKT_S_Die = 1009,
  	PKT_S_Connected = 1010,
  	PKT_C_Login = 1011,
  	PKT_S_Login = 1012,
  	PKT_C_CreatePlayer = 1013,
  	PKT_S_CreatePlayer = 1014,
  	PKT_C_EnterGame = 1015,
  	PKT_S_ItemList = 1016,
  	PKT_S_AddItem = 1017,
  	PKT_C_EquipItem = 1018,
  	PKT_S_EquipItem = 1019,
  	PKT_S_ChangeStat = 1020,
  	PKT_S_Ping = 1021,
  	PKT_C_Pong = 1022,
  };
  
  // Custom Handlers
  bool Handle_INVALID(PacketSessionRef& session, BYTE* buffer, int32 len);
  bool Handle_S_EnterGame(PacketSessionRef& session, Protocol::S_EnterGame& pkt);
  bool Handle_S_LeaveGame(PacketSessionRef& session, Protocol::S_LeaveGame& pkt);
  bool Handle_S_Spawn(PacketSessionRef& session, Protocol::S_Spawn& pkt);
  bool Handle_S_Despawn(PacketSessionRef& session, Protocol::S_Despawn& pkt);
  bool Handle_S_Move(PacketSessionRef& session, Protocol::S_Move& pkt);
  bool Handle_S_Skill(PacketSessionRef& session, Protocol::S_Skill& pkt);
  bool Handle_S_ChangeHp(PacketSessionRef& session, Protocol::S_ChangeHp& pkt);
  bool Handle_S_Die(PacketSessionRef& session, Protocol::S_Die& pkt);
  bool Handle_S_Connected(PacketSessionRef& session, Protocol::S_Connected& pkt);
  bool Handle_S_Login(PacketSessionRef& session, Protocol::S_Login& pkt);
  bool Handle_S_CreatePlayer(PacketSessionRef& session, Protocol::S_CreatePlayer& pkt);
  bool Handle_S_ItemList(PacketSessionRef& session, Protocol::S_ItemList& pkt);
  bool Handle_S_AddItem(PacketSessionRef& session, Protocol::S_AddItem& pkt);
  bool Handle_S_EquipItem(PacketSessionRef& session, Protocol::S_EquipItem& pkt);
  bool Handle_S_ChangeStat(PacketSessionRef& session, Protocol::S_ChangeStat& pkt);
  bool Handle_S_Ping(PacketSessionRef& session, Protocol::S_Ping& pkt);
  
  class ServerPacketHandler
  {
  public:
  	static void Init()
  	{
  		for (int32 i = 0; i < UINT16_MAX; i++)
  			GPacketHandler[i] = Handle_INVALID;
  		GPacketHandler[PKT_S_EnterGame] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_EnterGame>(Handle_S_EnterGame, session, buffer, len); };
  		GPacketHandler[PKT_S_LeaveGame] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_LeaveGame>(Handle_S_LeaveGame, session, buffer, len); };
  		GPacketHandler[PKT_S_Spawn] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_Spawn>(Handle_S_Spawn, session, buffer, len); };
  		GPacketHandler[PKT_S_Despawn] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_Despawn>(Handle_S_Despawn, session, buffer, len); };
  		GPacketHandler[PKT_S_Move] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_Move>(Handle_S_Move, session, buffer, len); };
  		GPacketHandler[PKT_S_Skill] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_Skill>(Handle_S_Skill, session, buffer, len); };
  		GPacketHandler[PKT_S_ChangeHp] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_ChangeHp>(Handle_S_ChangeHp, session, buffer, len); };
  		GPacketHandler[PKT_S_Die] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_Die>(Handle_S_Die, session, buffer, len); };
  		GPacketHandler[PKT_S_Connected] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_Connected>(Handle_S_Connected, session, buffer, len); };
  		GPacketHandler[PKT_S_Login] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_Login>(Handle_S_Login, session, buffer, len); };
  		GPacketHandler[PKT_S_CreatePlayer] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_CreatePlayer>(Handle_S_CreatePlayer, session, buffer, len); };
  		GPacketHandler[PKT_S_ItemList] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_ItemList>(Handle_S_ItemList, session, buffer, len); };
  		GPacketHandler[PKT_S_AddItem] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_AddItem>(Handle_S_AddItem, session, buffer, len); };
  		GPacketHandler[PKT_S_EquipItem] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_EquipItem>(Handle_S_EquipItem, session, buffer, len); };
  		GPacketHandler[PKT_S_ChangeStat] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_ChangeStat>(Handle_S_ChangeStat, session, buffer, len); };
  		GPacketHandler[PKT_S_Ping] = [](PacketSessionRef& session, BYTE* buffer, int32 len) { return HandlePacket<Protocol::S_Ping>(Handle_S_Ping, session, buffer, len); };
  	}
  
  	static bool HandlePacket(PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(buffer);
  		return GPacketHandler[header->id](session, buffer, len);
  	}
  	static SendBufferRef MakeSendBuffer(Protocol::C_Move& pkt) { return MakeSendBuffer(pkt, PKT_C_Move); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_Skill& pkt) { return MakeSendBuffer(pkt, PKT_C_Skill); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_Login& pkt) { return MakeSendBuffer(pkt, PKT_C_Login); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_CreatePlayer& pkt) { return MakeSendBuffer(pkt, PKT_C_CreatePlayer); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_EnterGame& pkt) { return MakeSendBuffer(pkt, PKT_C_EnterGame); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_EquipItem& pkt) { return MakeSendBuffer(pkt, PKT_C_EquipItem); }
  	static SendBufferRef MakeSendBuffer(Protocol::C_Pong& pkt) { return MakeSendBuffer(pkt, PKT_C_Pong); }
  
  private:
  	template<typename PacketType, typename ProcessFunc>
  	static bool HandlePacket(ProcessFunc func, PacketSessionRef& session, BYTE* buffer, int32 len)
  	{
  		PacketType pkt;
  		if (pkt.ParseFromArray(buffer + sizeof(PacketHeader), len - sizeof(PacketHeader)) == false)
  			return false;
  
  		return func(session, pkt);
  	}
  
  	template<typename T>
  	static SendBufferRef MakeSendBuffer(T& pkt, uint16 pktId)
  	{
  		const uint16 dataSize = static_cast<uint16>(pkt.ByteSizeLong());
  		const uint16 packetSize = dataSize + sizeof(PacketHeader);
  
  		SendBufferRef sendBuffer = GSendBufferManager->Open(packetSize);
  		PacketHeader* header = reinterpret_cast<PacketHeader*>(sendBuffer->Buffer());
  		header->size = packetSize;
  		header->id = pktId;
  		ASSERT_CRASH(pkt.SerializeToArray(&header[1], dataSize));
  		sendBuffer->Close(packetSize);
  
  		return sendBuffer;
  	}
  };
  C:Enum.pb.h
  1개 파일이 복사되었습니다.
  C:Enum.pb.cc
  1개 파일이 복사되었습니다.
  C:Struct.pb.h
  1개 파일이 복사되었습니다.
  C:Struct.pb.cc
  1개 파일이 복사되었습니다.
  C:Protocol.pb.h
  1개 파일이 복사되었습니다.
  C:Protocol.pb.cc
  1개 파일이 복사되었습니다.
  C:ClientPacketHandler.h
  1개 파일이 복사되었습니다.
  C:Enum.pb.h
  1개 파일이 복사되었습니다.
  C:Enum.pb.cc
  1개 파일이 복사되었습니다.
  C:Struct.pb.h
  1개 파일이 복사되었습니다.
  C:Struct.pb.cc
  1개 파일이 복사되었습니다.
  C:Protocol.pb.h
  1개 파일이 복사되었습니다.
  C:Protocol.pb.cc
  1개 파일이 복사되었습니다.
  C:ServerPacketHandler.h
  1개 파일이 복사되었습니다.
  C:Enum.cs
  1개 파일이 복사되었습니다.
  C:Struct.cs
  1개 파일이 복사되었습니다.
  C:Protocol.cs
  1개 파일이 복사되었습니다.
  계속하려면 아무 키나 누르십시오 . . . 
  pch.cpp
  Enum.pb.cc
  Protocol.pb.cc
C:\Developer\onlinegame\Server\GameServer\Protocol.pb.cc(1180,82): warning C4244: '인수': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Protocol.pb.cc(1614,70): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Protocol.pb.cc(2069,70): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Protocol.pb.cc(2296,70): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Protocol.pb.cc(2303,64): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Protocol.pb.cc(2521,70): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Protocol.pb.cc(2528,72): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Protocol.pb.cc(3108,69): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Protocol.pb.cc(4351,70): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Protocol.pb.cc(4574,70): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
  Struct.pb.cc
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(608,72): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(903,70): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(1205,66): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(1212,66): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(1462,67): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(1469,64): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(1476,67): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(1483,68): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(1497,70): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(1770,69): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(1967,70): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(1974,72): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(1981,67): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Developer\onlinegame\Server\GameServer\Struct.pb.cc(1988,66): warning C4244: '=': 'google::protobuf::uint64'에서 'google::protobuf::int32'(으)로 변환하면서 데이터가 손실될 수 있습니다.
  코드를 생성하고 있습니다...
  GameServer.cpp
  GameSession.cpp
  GameSessionManager.cpp
  Player.cpp
  ClientPacketHandler.cpp
  Room.cpp
  코드를 생성하고 있습니다...
  GameServer.vcxproj -> C:\Developer\onlinegame\Server\Binary\Debug\GameServer.exe
